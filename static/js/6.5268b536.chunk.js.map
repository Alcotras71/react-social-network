{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/Main/Login/Login.jsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","useField","field","Input","createField","tag","label","type","placeholder","name","validator","text","validate","defaultValidator","required","maxLength","value","length","LoginForm","onSubmit","initialValues","email","password","rememberMe","status","formSummaryError","form__btn","connect","state","isAuth","auth","login","logout","to","values","actions"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,UAAY,mC,+HCGzKC,EAAc,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACzCC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAS,UAAKC,IAAEC,YAAP,YAAsBH,EAAWE,IAAEJ,MAAQ,IAAzD,UACGC,EACAC,EAAW,+BAAOF,IAAgB,SAK5BM,EAAW,SAACC,GACvB,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcX,EAAd,KACA,OACE,cAACD,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACE,oDAAcW,GAAWF,QAKlBG,EAAQ,SAACH,GACpB,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcX,EAAd,KACA,OACE,cAACD,EAAD,2BAAiBU,GAAjB,IAAwBT,KAAMA,EAA9B,SACE,iDAAWW,GAAWF,QAKfI,EAAc,SAAEC,EAAKC,EAAOC,EAAMC,EAAaC,EAAMC,GAA2B,IAAhBC,EAAe,uDAAR,GAClF,MAAY,UAARN,EACKC,EACL,kCACE,cAACH,EAAD,CACEI,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACNG,SAAUF,IAEXC,KAGH,gCACE,cAACR,EAAD,CACEI,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACNG,SAAUF,IAEXC,KAKH,8BACE,cAACZ,EAAD,CACES,YAAaA,EACbC,KAAMA,EACNG,SAAUF,Q,iCC7DpB,kCAAO,IAAMG,EAAmB,SAACC,EAAUC,GAAX,OAAyB,SAACC,GACxD,IAAIvB,EAOJ,OANKuB,GAASF,EACZrB,EAAQ,WACCuB,EAAMC,OAASF,GAAaA,IACrCtB,EAAK,wBAAoBsB,EAApB,aAGAtB,K,iCCRT,oGA0BMyB,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,cAAC,IAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdJ,SAAUA,EANZ,SAQG,gBAAGK,EAAH,EAAGA,OAAH,OACC,eAAC,IAAD,WACGpB,YAAa,SAAS,EAAO,QAAS,QAAS,QAASS,aAAiB,IACzET,YAAa,SAAS,EAAO,WAAY,WAAY,WAAYS,aAAiB,IAClFT,YAAa,SAAS,EAAM,WAAY,GAAI,aAAc,GAAI,eAC9DoB,GAAU,qBAAK5B,UAAWC,IAAE4B,iBAAlB,SAAqCD,IAChD,qBAAK5B,UAAWC,IAAE6B,UAAlB,SACE,wBAAQnB,KAAK,SAAb,4BAYGoB,eAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEE,UAAOC,YAAlCL,EA9CD,SAAC,GAAuB,IAArBI,EAAoB,EAApBA,MAKf,OALmC,EAAbF,OAMb,cAAC,IAAD,CAAUI,GAAI,aAIrB,gCACE,uCACA,cAACf,EAAD,CAAWC,SAXE,SAACe,EAAQC,GACxBJ,EAAMG,EAAOb,MAAOa,EAAOZ,SAAUY,EAAOX,WAAYY","file":"static/js/6.5268b536.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3VohF\",\"error\":\"FormsControls_error__24i9u\",\"formSummaryError\":\"FormsControls_formSummaryError__-uaBO\",\"form__btn\":\"FormsControls_form__btn__3KY7R\"};","import React from 'react';\nimport s from './FormsControls.module.css';\nimport { useField } from 'formik';\n\nconst FormControl = ({ meta: { touched, error }, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n      {children}\n      {hasError ? <span>{error}</span> : null}\n    </div>\n  );\n};\n\nexport const Textarea = (props) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl {...props} meta={meta}>\n      <textarea {...field} {...props} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl {...props} meta={meta}>\n      <input {...field} {...props} />\n    </FormControl>\n  );\n};\n\nexport const createField = ( tag, label, type, placeholder, name, validator, text = '' ) => {\n  if (tag === 'input') {\n    return label ? (\n      <label>\n        <Input\n          type={type}\n          placeholder={placeholder}\n          name={name}\n          validate={validator}\n        />\n        {text}\n      </label>\n    ) : (\n      <div>\n        <Input\n          type={type}\n          placeholder={placeholder}\n          name={name}\n          validate={validator}\n        />\n        {text}\n      </div>\n    );\n  } else if ('textarea') {\n    return (\n      <div>\n        <Textarea\n          placeholder={placeholder}\n          name={name}\n          validate={validator}\n        />\n      </div>\n    );\n  }\n};\n","export const defaultValidator = (required, maxLength) => (value) => {\n  let error;\n  if (!value && required) {\n    error = 'Required';\n  } else if (value.length > maxLength && maxLength) {\n    error = `Max length is ${maxLength} symbols`;\n  }\n\n  return error;\n};\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { createField } from '../../common/FormsControls/FormsControls';\nimport { defaultValidator } from '../../../utils/validators/validators';\nimport connect from 'react-redux/lib/connect/connect';\nimport { login, logout } from '../../../redux/authReducer';\nimport { Redirect } from 'react-router-dom';\nimport s from '../../common/FormsControls/FormsControls.module.css';\n\nconst Login = ({ login, isAuth }) => {\n  const onSubmit = (values, actions) => {\n    login(values.email, values.password, values.rememberMe, actions);\n  };\n\n  if (isAuth) {\n    return <Redirect to={'/profile'} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginForm onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst LoginForm = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        rememberMe: false,\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ status }) => (\n        <Form>\n          {createField( 'input', false, 'email', 'Email', 'email', defaultValidator(true) )}\n          {createField( 'input', false, 'password', 'Password', 'password', defaultValidator(true) )}\n          {createField( 'input', true, 'checkbox', '', 'rememberMe', '', 'Remember me' )}\n          {status && <div className={s.formSummaryError}>{status}</div>}\n          <div className={s.form__btn}>\n            <button type=\"submit\">Login</button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport default connect(mapStateToProps, { login, logout })(Login);\n"],"sourceRoot":""}